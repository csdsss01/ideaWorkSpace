server.port=8080
#spring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl
#useUnicode=true&characterEncoding=utf8
#spring.datasource.username=scott
#spring.datasource.password=admin
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver

spring.datasource.druid.url=jdbc:oracle:thin:@localhost:1521:orcl
spring.datasource.druid.username=scott
spring.datasource.druid.password=admin
#最小连接数
spring.datasource.druid.initial-size=5
#最大连接数
spring.datasource.druid.max-active=20
#最小空闲数
spring.datasource.druid.min-idle=10
#最大等待时长
spring.datasource.druid.max-wait=10
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。
#在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
#spring.datasource.druid.pool-prepared-statements=true
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000


#实体别名
mybatis.typeAliasesPackage=com.aaa.ssm.entitys
#mapper文件扫描
mybatis.mapperLocations=classpath\:mapper/*.xml
#配置静态资源前后缀
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

#配置上传路径
upload.path=D:/images/

spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=0
#上传文件大小配置
spring.servlet.multipart.max-file-size=10mb
spring.servlet.multipart.max-request-size=10mb
#Session加载实体对象的步骤是：  Session在调用数据库查询功能之前，首先会在一级缓存中通过实体类型和主键进行查找，
#如果一级缓存查找命 中且数据状态合法，则直接返回； ② 如果一级缓存没有命中，接下来Session会在当前NonExists记录（
#相当于一个查询黑名单，如果出现重复的无效 查询可以迅速做出判断，从而提升性能）中进行查找，如果NonExists中存在同样的查询条件\
#则返回null； ③ 如果一级缓存查询失败则查询二级缓存，如果二级缓存命中则直接返回； ④ 如果之前的查询都未命中，则发出SQL语句\
#并创建对应的实体对象； ⑥ 将对象纳入Session（一级缓存）的管理； ⑦ 如果有对应的拦截器，则执行拦截器的onLoad方法；\
 #如果开启并设置了要使用二级缓存，则将数据对象纳入二级缓存； ⑨ 返回数据对象。